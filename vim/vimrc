"__     ___                    
"\ \   / (_)_ __ ___  _ __ ___ 
" \ \ / /| | '_ ` _ \| '__/ __|
"  \ V / | | | | | | | | | (__ 
"   \_/  |_|_| |_| |_|_|  \___|

syntax on
set number
set wildmenu
set relativenumber
set cursorline
set showcmd 
set hlsearch
set encoding=utf-8
set showmatch
set tabstop=4
set autoindent
set scrolloff=4


map ! :q!<CR>
map Q :wq<CR>
map S :w<CR>
map R :source $MYVIMRC<CR>

"spellcheck
map <LEADER>sc :set spell!<CR>
noremap <C-x> ea<C-x>s
inoremap <C-x> <Esc>ea<C-x>s

map sl :set splitright<CR>:vsplit<CR>
map sj :set nosplitright<CR>:vsplit<CR>
map si :set nosplitbelow<CR>:split<CR>
map sk :set splitbelow<CR>:split<CR>
 
noremap k j
noremap i k
noremap h i
noremap j h
noremap H I

map <up> :res +5<CR>
map <down> :res -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>    

let mapleader=' '

"split
map <LEADER>i <C-w>k
map <LEADER>k <C-w>j
map <LEADER>j <C-w>h
map <LEADER>l <C-w>l


nnoremap <LEADER>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap tt :NERDTreeToggle<CR>
nnoremap <LEADER>f :NERDTreeFind<CR>
    
"NERDTree"
let NERDTreeMapOpenSplit = 'h'

"figlet  ascii字符文字
map fg :r !figlet 

call plug#begin('~/.vim/plugged')
    
Plug 'vim-airline/vim-airline'
Plug 'connorholyday/vim-snazzy'
" File navigation
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'

"markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install_sync() }, 'for' :['markdown', 'vim-plug'] }

" Undo Tree
Plug 'mbbill/undotree/'

" Python
Plug 'vim-scripts/indentpython.vim'

" Error checking
Plug 'w0rp/ale'
call plug#end()


let g:SnazzyTransparent = 1

colorscheme snazzy

map <F5> :call CompileRunGcc()<CR>
    func! CompileRunGcc()
        exec "w"
        if &filetype == 'c'
            exec "!g++ % -o %<"
            exec "!time ./%<"
        elseif &filetype == 'cpp'
            exec "!g++ % -o %<"
            exec "!time ./%<"
        elseif &filetype == 'java'
            exec "!javac %"
            exec "!time java %<"
        elseif &filetype == 'sh'
            :!time bash %
        elseif &filetype == 'python'
            exec "!time python3 %"
        elseif &filetype == 'html'
            exec "!firefox % &"
        elseif &filetype == 'go'
    "        exec "!go build %<"
            exec "!time go run %"
        elseif &filetype == 'markdown'
  		    exec "MarkdownPreview"
        endif
    endfunc

	let g:syntastic_python_python_exec = 'python3' 
